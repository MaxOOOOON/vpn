---
- name: Selinux disable
  selinux:
      policy: targeted
      state: permissive

- name:  git checkout from github
  git: 
    repo: 'https://github.com/OpenVPN/easy-rsa'
    dest: '{{ easyrsa_dest}}'

- name: Initialize pki
  command: ./easyrsa --batch init-pki
  args: 
    chdir: "{{easyrsa_dest}}/easyrsa3"

- name: Build CA keys
  command: ./easyrsa --batch build-ca nopass
  args:
    chdir: "{{easyrsa_dest}}/easyrsa3"

- name: Build the DH (Diffie-Hellman) key
  command: ./easyrsa gen-dh
  args:
    chdir: "{{easyrsa_dest}}/easyrsa3"

- name: Generate the server certificate/key
  command: ./easyrsa build-server-full server nopass
  args:
    chdir: "{{easyrsa_dest}}/easyrsa3"

- name: Copy server certs
  copy:
    src: '{{ item }}'
    dest: /etc/openvpn/server/
    remote_src: true
  loop:
      - '{{easyrsa_dest}}/easyrsa3/pki/ca.crt'
      - '{{easyrsa_dest}}/easyrsa3/pki/issued/'
      - '{{easyrsa_dest}}/easyrsa3/pki/private/'
      - '{{easyrsa_dest}}/easyrsa3/pki/dh.pem'

- name: Server tun config copy
  copy:
    src: tun.conf
    dest: /etc/openvpn/server/tun.conf

- name: Server tap config copy
  copy:
    src: tap.conf
    dest: /etc/openvpn/server/tap.conf


- name: Check create client certificate
  stat:
    path: '{{easyrsa_dest}}/easyrsa3/pki/reqs/{{item}}.req'
  loop: '{{clients|list}}'
  register: stat_result


- name: Generate the client certificate/key
  command: ./easyrsa --batch build-client-full {{item.item}} nopass
  args: 
    chdir: "{{easyrsa_dest}}/easyrsa3"
  when: not item.stat.exists
  loop: "{{ stat_result.results }}"


#Copy certificates to client etc folders
- name: 'Copy ca.crt'
  copy:
    src: '{{easyrsa_dest}}/easyrsa3/pki/ca.crt'
    dest: '/etc/openvpn/client/{{item}}/'
    remote_src: true
  loop: '{{clients|list}}'

- name: 'Copy crt files'
  copy:
    src: '{{easyrsa_dest}}/easyrsa3/pki/issued/{{item}}.crt'
    dest: '/etc/openvpn/client/{{item}}/'
    remote_src: true
  loop: '{{clients|list}}'
  
- name: 'Copy key files'
  copy:
    src: '{{easyrsa_dest}}/easyrsa3/pki/private/{{item}}.key'
    dest: '/etc/openvpn/client/{{item}}/'
    remote_src: true
  loop: '{{clients|list}}'


- name: Fetch keys for client1
  fetch: 
      src: '{{ item }}'
      dest: "buffer/"
      flat: yes
  loop:
    - '{{easyrsa_dest}}/easyrsa3/pki/ca.crt'
    - '{{easyrsa_dest}}/easyrsa3/pki/issued/client1.crt'
    - '{{easyrsa_dest}}/easyrsa3/pki/private/client1.key'


- name: Server tun config copy
  copy:
    src: tap.ovpn
    dest: /etc/openvpn/client/tap.ovpn

#Generate config for host client
- name: Fetch keys for host client
  fetch: 
      src: '{{ item }}'
      dest: "buffer/"
      flat: yes
  loop:
    - '{{easyrsa_dest}}/easyrsa3/pki/ca.crt'
    - '{{easyrsa_dest}}/easyrsa3/pki/issued/host.crt'
    - '{{easyrsa_dest}}/easyrsa3/pki/private/host.key'

- name: '1'
  blockinfile:
    path: /etc/openvpn/client/tap.ovpn
    insertafter: "^<ca>"
    marker: "# {mark} ca.crt MARKER"
    block: "{{ lookup('file', 'buffer/ca.crt') }}"

- name: '2'
  blockinfile:
    path: /etc/openvpn/client/tap.ovpn
    insertafter: "^<cert>"
    marker: "# {mark} host.crt MARKER"
    block: "{{ lookup('file', 'buffer/host.crt') }}"

- name: '3'
  blockinfile:
    path: /etc/openvpn/client/tap.ovpn
    insertafter: "^<key>"
    marker: "# {mark} host.key MARKER"
    block: "{{ lookup('file', 'buffer/host.key') }}"


- name: Fetch profile for host client
  fetch: 
      src: /etc/openvpn/client/tap.ovpn
      dest: "host-profile/"
      flat: yes



- name: Start tun service
  systemd:
    name: openvpn-server@tun
    state: restarted
    enabled: true

- name: Start tap service
  systemd:
    name: openvpn-server@tap
    state: restarted
    enabled: true
